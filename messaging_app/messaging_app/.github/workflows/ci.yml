name: Django CI

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_pass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    env:
      DB_NAME: test_db
      DB_USER: test_user
      DB_PASSWORD: test_pass
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      PYTHONPATH: .
      DJANGO_SETTINGS_MODULE: messaging_app.settings

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r messaging_app/requirements.txt
          pip install flake8 coverage pytest pytest-django

      - name: Wait for MySQL to start
        run: |
          until mysqladmin ping -h 127.0.0.1 -u root -proot --silent; do
            echo "Waiting for database..."
            sleep 3
          done

      - name: Run flake8 lint check
        run: |
          source venv/bin/activate
          # Fail build on any lint error
          flake8 messaging_app --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 messaging_app --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics

      - name: Run database migrations
        run: |
          source venv/bin/activate
          python messaging_app/manage.py migrate

      - name: Run tests with coverage
        run: |
          source venv/bin/activate
          coverage run --source=messaging_app -m pytest --ds=messaging_app.settings
          coverage xml
          coverage report -m

      - name: Upload test and coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: |
            test-results/
            coverage.xml
